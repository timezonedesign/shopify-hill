// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.22/esri/copyright.txt for details.
//>>built
define("exports ../../../chunks/_rollupPluginBabelHelpers ../../../chunks/tslib.es6 ../../../core/Evented ../../../core/HandleOwner ../../../core/maybe ../../../core/promiseUtils ../../../core/reactiveUtils ../../../core/accessorSupport/decorators/property ../../../core/arrayUtils ../../../core/has ../../../core/accessorSupport/ensureType ../../../core/accessorSupport/decorators/subclass ../../../chunks/vec2 ../../../geometry/SpatialReference ./FeatureSnappingEngine ./SelfSnappingEngine ./SnappingOptions ./snappingUtils ./candidates/IntersectionSnappingCandidate".split(" "),
function(h,r,l,z,A,t,B,p,q,J,K,L,C,D,E,F,G,H,m,u){h.SnappingManager=function(x){function v(a){a=x.call(this,a)||this;a.options=new H;a.engines=[];a._currentMainCandidate=null;a._currentOtherActiveCandidates=[];return a}r._inheritsLoose(v,x);var g=v.prototype;g.initialize=function(){this.handles.add([p.react(()=>{const {effectiveFeatureEnabled:a,effectiveSelfEnabled:b,touchSensitivityMultiplier:c,distance:d}=this.options;return{effectiveFeatureEnabled:a,effectiveSelfEnabled:b,touchSensitivityMultiplier:c,
distance:d}},()=>{this.doneSnapping();this.emit("changed")},p.sync),p.react(()=>this.options,a=>{for(const b of this.engines)b.options=a},p.sync),p.react(()=>this.view.ready,a=>this.onViewReady(a),p.syncAndInitial)])};g.destroy=function(){this.destroyEngines()};g.onViewReady=function(a){this.destroyEngines();if(a){var b,c;this.engines=[new G.SelfSnappingEngine({view:this.view,options:this.options}),new F.FeatureSnappingEngine({view:this.view,spatialReference:null!=(b=null==(c=this.view)?void 0:c.spatialReference)?
b:E.WGS84,options:this.options})]}};g.destroyEngines=function(){for(const a of this.engines)a.destroy();this.engines.length=0};g.snap=function(){var a=r._asyncToGenerator(function*(b,c,d){const e=c.coordinateHelper.pointToVector(b),f=yield this.fetchCandidates(e,c,d);return{get valid(){return!B.isAborted(d)},apply:()=>{const {snappedPoint:n,hints:k}=this.processCandidates(e,f,c);this.removeVisualization();t.isSome(c.visualizer)&&this.handles.add(c.visualizer.draw(k,{coordinateHelper:c.coordinateHelper,
elevationInfo:c.elevationInfo,view:this.view}),"visualization-handle");return n}}});return function(b,c,d){return a.apply(this,arguments)}}();g.update=function(a,b){this.removeVisualization();let c=a;const d=[];if(t.isSome(this._currentMainCandidate)){const e=b.coordinateHelper;a=e.pointToVector(a);const f=this._currentMainCandidate.constraint.closestTo(a);if(m.squareDistance(m.anyMapPointToScreenPoint(a,e,b.elevationInfo,this.view),m.anyMapPointToScreenPoint(f,e,b.elevationInfo,this.view))<this.squaredPointProximityThreshold(b.pointer)){c=
e.vectorToDehydratedPoint(f);this._currentMainCandidate.targetPoint=f;d.push(...this._currentMainCandidate.hints);for(const n of this._currentOtherActiveCandidates)n.targetPoint=f,d.push(...n.hints)}else this._currentMainCandidate=null,this._currentOtherActiveCandidates=[]}t.isSome(b.visualizer)&&this.handles.add(b.visualizer.draw(d,{coordinateHelper:b.coordinateHelper,elevationInfo:b.elevationInfo,view:this.view}),"visualization-handle");return c};g.doneSnapping=function(){this.removeVisualization();
this._currentMainCandidate=null;this._currentOtherActiveCandidates=[]};g.removeVisualization=function(){this.handles.remove("visualization-handle")};g.fetchCandidates=function(){var a=r._asyncToGenerator(function*(b,c,d){return(yield Promise.all(this.engines.map(e=>e.fetchCandidates(b,c,d)))).flat()});return function(b,c,d){return a.apply(this,arguments)}}();g.processCandidates=function(a,b,c){if(1>b.length)return this.doneSnapping(),{snappedPoint:c.coordinateHelper.vectorToDehydratedPoint(a),hints:[]};
m.sortCandidatesInPlace(a,b);const d=this._currentMainCandidate;if(t.isSome(d)){const e=this.findOldConstraintInNewCandidates(d,b);if(0<=e)if(b[e]instanceof u.IntersectionSnappingCandidate){if(D.squaredDistance(a,d.targetPoint)<this.squaredPointProximityThreshold(c.pointer))return this.updateSnappingCandidate(d,b,c)}else return this.intersectWithOtherCandidates(e,b,a,c)}return this.intersectWithOtherCandidates(0,b,a,c)};g.findOldConstraintInNewCandidates=function(a,b){return a instanceof u.IntersectionSnappingCandidate?
0<=this.findOldCandidateIndex(b,a.first)&&0<=this.findOldCandidateIndex(b,a.second)?0:-1:this.findOldCandidateIndex(b,a)};g.intersectWithOtherCandidates=function(a,b,c,d){const e=b[a],f=[],n=d.coordinateHelper;for(let k=0;k<b.length;++k){if(k===a)continue;const w=b[k];for(const I of e.constraint.intersect(w.constraint)){const y=n.fromXYZ(I.intersection,e.targetPoint[2]);f.push([new u.IntersectionSnappingCandidate(n,y,e,w),m.squareDistance(m.anyMapPointToScreenPoint(c,d.coordinateHelper,d.elevationInfo,
this.view),m.anyMapPointToScreenPoint(y,d.coordinateHelper,d.elevationInfo,this.view))])}}return 0<f.length&&(f.sort((k,w)=>k[1]-w[1]),f[0][1]<this.squaredPointProximityThreshold(d.pointer))?this.updateSnappingCandidate(f[0][0],b,d):this.updateSnappingCandidate(e,b,d)};g.updateSnappingCandidate=function(a,b,c){this.doneSnapping();this._currentMainCandidate=a;const d=this._currentMainCandidate.targetPoint,e=[];e.push(...a.hints);for(const f of b){if(a instanceof u.IntersectionSnappingCandidate){if(f.constraint.objectEqual(a.first.constraint)||
f.constraint.objectEqual(a.second.constraint))continue}else if(f.constraint.objectEqual(a.constraint))continue;f.constraint.check(d)&&(f.targetPoint=d,this._currentOtherActiveCandidates.push(f),e.push(...f.hints))}return{snappedPoint:c.coordinateHelper.vectorToDehydratedPoint(d),hints:e}};g.squaredPointProximityThreshold=function(a){return"touch"===a?this.squaredTouchProximityThreshold:this.squaredMouseProximityTreshold};g.findOldCandidateIndex=function(a,b){let c=-1;for(let d=0;d<a.length;++d)if(b.constraint.objectEqual(a[d].constraint)){c=
d;break}return c};r._createClass(v,[{key:"updating",get:function(){return this.engines.some(a=>a.updating)}},{key:"squaredMouseProximityTreshold",get:function(){return this.options.distance*this.options.distance}},{key:"squaredTouchProximityThreshold",get:function(){const {distance:a,touchSensitivityMultiplier:b}=this.options,c=a*b;return c*c}},{key:"test",get:function(){return{visualizationsActive:this.handles.has("visualization-handle"),engines:this.engines}}}]);return v}(z.EventedMixin(A.HandleOwner));
l.__decorate([q.property({constructOnly:!0})],h.SnappingManager.prototype,"view",void 0);l.__decorate([q.property()],h.SnappingManager.prototype,"options",void 0);l.__decorate([q.property({readOnly:!0})],h.SnappingManager.prototype,"updating",null);l.__decorate([q.property()],h.SnappingManager.prototype,"engines",void 0);l.__decorate([q.property()],h.SnappingManager.prototype,"squaredMouseProximityTreshold",null);l.__decorate([q.property()],h.SnappingManager.prototype,"squaredTouchProximityThreshold",
null);h.SnappingManager=l.__decorate([C.subclass("esri.views.interactive.snapping.SnappingManager")],h.SnappingManager);Object.defineProperty(h,"__esModule",{value:!0})});